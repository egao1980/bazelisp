;; -*- mode: Lisp -*-

(module lisp-bazel-els2016 (lib "run.ss" "slideshow")
  (slide ; 1
   (titlet "Building Lisp using Google's Bazel")
   (blank)
   (t "... or how we build Lisp on thousands of machines")
   (t "and still get consistent and deterministic results."))

  (define (i . l)
    (apply page-item l))

  (define (si . l)
    (apply page-subitem l))

  (slide/title ; 2
   "What is Bazel and why it is interesting?"
   (i "Google's answer to Make files that scales...")
   (i "Correct, using file hashes not timestamps.")
   (i "Declarative BUILD language.")
   ;; BUILD rules describe the compilation in a declarative way.
   ;; Bazel will match all the production rules at load time, and
   ;; check for any problems, and create a build action graph.
   (i "Supports many platforms and programming languages.")
   ;; ... except that bazelisp is SBCL/Linux only
   (i "Actions are sandboxed.")
   ;; Each action is put into a root of symlinked file tree.
   ;; The inputs to each action are copied and all the
   ;; undeclared outputs are deleted afterwards.
   (i "Artifacts are cached.")
   ;; In a company with few thousands of engineers and countless
   ;; test and build processes running - caching of the inputs artifacts
   ;; not just on a single machine, but across global cloud is necessary.
   ;; E.g. when building with BAZELIP for the first time - it will
   ;; take about 10 minutes to compile SBCL first. The second run
   ;; should take less time even if the server process dies.
   (i "General purpose:")
   (si "extensible using Skylark,")
   (si "multiple configurations, cross-compilation")
   (si "multiple architectures in one pass - not yet")
   ;; Skylark is the Python-like script language that has been
   ;; heavily limited. E.g. there is no recursion and all the
   ;; objects a copy on write.
   ;; Our Bazel extension for Lisp are written in Skylark using a
   ;; combination of Skylark's "macros" and Skylark's "rules".
   )

  (slide/title ; 3
   "Why Bazel ... and not something else?"
   (i "Make was unreliable, slow, and could not easy use build clusters.")
   ;; Make is unreliable because it uses timestamps for synchronization
   ;; making it necessary to maintain a coherent global time across
   ;; a global computing cloud.
   (i "Solutions geared to only one development system or language.")
   (si "Ant and Maven - Java and monolithic projects.")
   (si "distcc / ccache - C/C++.")
   (i "ASDF")
   (si "limited to Common Lisp - single sessions.")
   (si "bazel BUILD files easier to write and maintain.")
   ;; Flattening considerably the learning curve.
   (si "difficult for re-factoring of large Lisp projects.")
   (si "no sand-boxing and no across the company caching."))

  (slide/title ; 4
   "Why not Bazel? The limitations."
   (i "Open-Source version has no support for build clusters, yet.")
   ;; When running bazel on a single machine should be slower than using ASDF.
   (i "Mostly geared towards 'standard' languages: Java, C++, Go, ...")
   ;; Bazel (Blaze) team would most the time only support
   ;; the languages they liked.
   (i "Java (and Skylark)")
   ;; Bazel is a complex system with a lot of technical debt.
   ;; Before Skylark the support for other language compilation
   ;; was mostly implemented in Java and the Bazel team was unwilling
   ;; to accept many of the modifications necessary to support Lisp.
   (si "Why do we need Java to build Lisp?")
   ;; We would previously require Python, too.
   (si "Difficult to maintain by individuals.")
   ;; The bazel architecture has advantage when using it on
   ;; a build cluster - which we call Forge in Google.
   ;; The build machines need to be maintained and the build servers running.
   ;; Updates to the beta software can throw a wrench into one's build
   ;; setup as the details are still being worked on.
   ;; Bazelisp comes with a set of BUILD files in the build_defs folder
   ;; that are not maintained at the same place as the original library.
   ;; If the implementation details change, the authors will not be
   ;; able or willing to change the build_defs.
   (si "Requires considerable resources.")
   ;; I have 12 cores and 64GB RAM and I am still only able to
   ;; run just two of builds in separate clients... for some reason
   ;; Bazel does not run twice in the same client.
   ;; If I run 2 builds, I have to kill a few of my Chrome tabs
   ;; otherwise my machine get a bit slower.
   (i "Not a Software Configuration Management system.")
   (si "best with a single repository.")
   ;; At Google all the sources are maintained under one tree.
   ;; There is no need to write the WORKSPACE file for every
   ;; single module that is maintained in a separate repository.
   (si "best when every module has one version.")
   ;; In order to avoid the "dll/version" hell all there is
   ;; only one version of every source checked in.
   ;; Thus there was no need to develop a solution for handling
   ;; multiple version requirements.

   )

  (slide/title/center ; 5
   "Lisp BUILD rules: lisp_library"
   (vl-append
   (colorize (tt "# Access the Lisp BUILD rules.") "brown")
   (tt "load(\"@lisp__bazel//:bazel/rules.bzl\",")
   (tt "     \"lisp_library\")")
   (colorize (tt "# Define the build rule.") "brown")
   (tt "lisp_library(")
   (tt "   name = \"alexandria\",")
   (tt "   srcs = [")
   (tt "     \"package.lisp\",")
   (colorize (tt "     # ...") "brown")
   (tt "     \"io.lisp\"],")
   (tt "   visibility = [\"//visibility:public\"])")))

  (slide/title/center ; 6
   "Lisp BUILD rules: lisp_binary"
   (vl-append
   (tt "load(\"@lisp__bazel//:bazel/rules.bzl\",")
   (tt "     \"lisp_binary\")")
   (colorize (tt "# The canonical example.") "brown")
   (tt "lisp_binary(")
   (tt "   name = \"hello\",")
   (tt "   srcs = [\"hello.lisp\"],")
   (tt "   main = \"hello:main\",")
   (tt "   deps = [\"@lisp__alexandria//:alexandria\"]")))

  (slide/title/center ; 7
    "Installation"
    (vl-append
    (* 4 line-sep)
    (tt "> sh bazel-0.2.2-installer-linux-x86_64.sh --user")
    (tt "> export PATH=~/bin:$PATH")
    (tt "> git clone https://github.com/qitab/bazelisp.git")
    (tt "> cd bazelisp ; bazel info")))

 (slide/title/center ; 8
  "Setup and test"
  (i "The WORKSPACE file...")

  (colorize
   (vl-append
    (tt "workspace(name = \"lisp__bazel\")")
    (tt "load(\"/lisp.WORKSPACE\", \"lisp_repositories\")")
    (colorize (t "# Initialize Lisp repos.") "brown")
    (tt "lisp_repositories(")
    (colorize (t "    # Path to bazelisp installation.") "brown")
    (tt "  \"/Users/andrzejwalczak/bazelisp\",")
    (colorize (t "    # Root of SBCL binary installation.") "brown")
    (tt "  \"/usr/local/\")"))
   "darkblue")


  'alts
  (list (list
          (i "The first build.")
          (tt "> bazel run hello"))
        (list
          (i "The first build.")
          (hc-append
           (tt "> bazel run")
           (colorize (tt " --verbose_failures --sandbox_debug") "darkgreen")
           (tt " hello")))
        (list
          (i "The first build.")
          (hc-append
           (tt "> bazel run")
           (colorize (tt " --define=VERBOSE_LISP_BUILD=2") "darkgreen")
           (tt " hello")))))

;; Module end
)
