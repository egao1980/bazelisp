;; -*- mode: Lisp -*-

(module lisp-bazel-els2016 (lib "run.ss" "slideshow")
  (slide
   (titlet "Building Lisp using Google's Bazel")
   (blank)
   (t "... or how we build Lisp on thousands of machines")
   (t "and still get consistent and deterministic results."))

  (define (i . l)
    (apply page-item l))

  (define (si . l)
    (apply page-subitem l))

  (slide/title
   "What is Bazel and why it is interesting?"
   (i "Scales to large distributed builds.") ;; Unlike Make, ASDF. More general than distcc.
   (i "Correct, using file hashes not timestamps.") ;; Unlike Make, unlike ASDF.
   (i "Declarative BUILD language.") ;; Like ASDF, unlike Make.
   (i "General purpose: extensible using Skylark.") ;; It sucks, so do Make and ASDF.
   (i "Supports many platforms and programming languages.") ;; Like Make, unlike ASDF.
   (i "Actions are sandboxed.") ;; Unlike Make, ASDF.
   (i "Artifacts are cached.")) ;; ccache

  (slide/title
   "Why not Bazel? The limitations."
   (i "Difficult to maintain by individuals.") ;; ??? More so than Make or ASDF?
   (i "Requires considerable resources.") ;; ? Gigabytes at runtime?
   (i "Not a Software Configuration Management system.")
   (si "best with a single repository.")
   (si "best when every module has one version.")
   (i "No support for pulling remote repositories.") ;;; Uh? What about "external repositories"?
   (si "Falls short to QuickLisp in this respect.")  ;;; What about the way we map lisp__foo ???
   (i "Open-Source version has no support for build clusters, yet.") ;; Being worked on
   (i "Java.")) ;; ??? Isn't that a subitem of to the Difficult to maintain thing?

  (slide/title/center
   "Lisp BUILD rules: lisp_library"
   (vl-append
   (colorize (tt "# Access the Lisp BUILD rules.") "brown")
   (tt "load(\"@lisp__bazel//:bazel/rules.bzl\",")
   (tt "     \"lisp_library\")")
   (colorize (tt "# Define the build rule.") "brown")
   (tt "lisp_library(")
   (tt "   name = \"alexandria\",")
   (tt "   srcs = [")
   (tt "     \"package.lisp\",")
   (colorize (tt "     # ...") "blue")
   (tt "     \"io.lisp\"],")
   (tt "   visibility = [\"//visibility:public\"])")))

  (slide/title/center
   "Lisp BUILD rules: lisp_binary"
   (vl-append
   (tt "load(\"@lisp__bazel//:bazel/rules.bzl\",")
   (tt "     \"lisp_binary\")")
   (colorize (tt "# The canonical example.") "brown")
   (tt "lisp_binary(")
   (tt "   name = \"hello\",")
   (tt "   srcs = [\"hello.lisp\"],")
   (tt "   main = \"hello:main\",")
   (tt "   deps = [\"@lisp__alexandria//:alexandria\"]")))

  (slide/title/center
    "Installation"
    (vl-append
    (* 4 line-sep)
    (tt "> sh bazel-0.2.2-installer-linux-x86_64.sh --user")
    (tt "> export PATH=~/bin:$PATH")
    (tt "> git clone https://github.com/qitab/bazelisp.git")
    (tt "> cd bazelisp ; bazel info")))

 (slide/title/center
  "Setup and test"
  (i "The WORKSPACE file...")

  (colorize
   (vl-append
    (tt "workspace(name = \"lisp__bazel\")")
    (tt "load(\"/lisp.WORKSPACE\", \"lisp_repositories\")")
    (colorize (t "# Initialize Lisp repos.") "brown")
    (tt "lisp_repositories(")
    (colorize (t "    # Path to bazelisp installation.") "brown")
    (tt "  \"/Users/andrzejwalczak/bazelisp\",")
    (colorize (t "    # Root of SBCL binary installation.") "brown")
    (tt "  \"/usr/local/\")"))
   "darkblue")

  (i "The first build.")
  (vl-append
   (tt "> bazel run hello")))

;; Module end
)
